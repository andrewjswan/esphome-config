# Neopixel
interval: 1s
then:
  - lambda: |-
      static bool action = false;
      static bool first_run = true;
      static int prev_co2 = 0;

      static float coef = (0.0 - 85.0) / (${med_co2} - ${min_co2});
      static float coef_min = (0.5 - 0.0) / (${min_co2} - 0);
      static float coef_med = (1.0 - 0.5) / (${med_co2} - ${min_co2});

      bool alert_mode = ((strcasecmp(id(neopixel_led).get_effect_name().c_str(), "Strobe Blue") == 0) or
                         (strcasecmp(id(neopixel_led).get_effect_name().c_str(), "Strobe Purple") == 0) or
                         (strcasecmp(id(neopixel_led).get_effect_name().c_str(), "Strobe Green") == 0) or
                         (strcasecmp(id(neopixel_led).get_effect_name().c_str(), "Strobe Alarm") == 0) or
                         (strcasecmp(id(neopixel_led).get_effect_name().c_str(), "Strobe Police") == 0));

      if (id(automatic).state and !alert_mode)
      {
        if (!id(night).state)
        {
          int min = id(esp_time).now().minute;
          if (min == 0 or min == 15 or min == 30 or min == 45)
          {
            if (!action)
            {
              action = true;

              auto call = id(neopixel_led).turn_on();
              call.set_effect("Clock");
              call.perform();
            }
          }
          else
          {
            if (first_run)
            {
              action = true;
              first_run = false;
            }

            if (!id(neopixel_led).remote_values.is_on())
            {
              action = true;
            }

            if (strcasecmp(id(neopixel_led).get_effect_name().c_str(), "None") != 0)
            {
              action = true;
            }

            if (prev_co2 == 0)
            {
              action = true;
            }

            int co2 = id(senseair_co2).state;
            if (co2 != 0 && abs(prev_co2 - co2) > 50)
            {
              action = true;
              prev_co2 = co2;
            }

            if (action)
            {
              action = false;

              if (strcasecmp(id(neopixel_led).get_effect_name().c_str(), "None") != 0)
              {
                auto call = id(neopixel_led).turn_on();
                call.set_effect("None");
                call.perform();
              }

              auto call = id(neopixel_led).turn_on();
              call.set_transition_length(10000);

              if (prev_co2 == 0 || co2 == 0)
              {
                call.set_rgb(1.0, 1.0, 1.0);
                call.set_brightness(0.5);
              }
              else if (co2 <= ${min_co2})
              {
                call.set_rgb(0.0, 1.0, 0.0);
                call.set_brightness(0.5 + (co2 - ${min_co2}) * coef_min);
              }
              else if (co2 <= ${med_co2})
              {
                int hue = 85 + (co2 - ${min_co2}) * coef;
                Color color = ESPHSVColor(hue, 255, 255).to_rgb();

                call.set_rgb(color.red / 255.0, color.green / 255.0, color.blue / 255.0);
                call.set_brightness(0.5 + (co2 - ${min_co2}) * coef_med);
              }
              else
              {
                call.set_rgb(1.0, 0.0, 0.0);
                call.set_brightness(1.0);
              }

              call.perform();
            }
          }
        }
        else if (id(neopixel_led).remote_values.is_on())
        {
          auto call = id(neopixel_led).turn_off();
          call.set_transition_length(10000);
          call.perform();

          action = false;
          prev_co2 = 0;
        }
      }
      else
      {
        action = false;
        prev_co2 = 0;
        first_run = true;
      }
