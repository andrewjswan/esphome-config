# ESPHome Uptime
platform: template
name: Uptime (formatted)
lambda: |-
  uint32_t uptime = (id(device_uptime).state);
  if (uptime == UINT32_MAX || uptime < 60)
  {
    return { std::string("Только запущен...").c_str() };
  }

  int minutes = ceil((uptime % 3600) / 60.0);
  int hours = (uptime % 86400) / 3600;
  int days = uptime / 86400;

  std::string result = "";
  if (days > 0)
  {
    // return { (std::string(days) + " д. " + std::string(hours) + " ч. " + std::string(minutes) + " мин.").c_str() };
    result = std::to_string(days);
    result += " д. ";
    result += std::to_string(hours);
    result += " ч. ";
    result += std::to_string(minutes);
    result += " мин.";
  }
  else if (hours > 0)
  {
    // return { (std::string(hours) + " ч. " + std::string(minutes) + " мин.").c_str() };
    result = std::to_string(hours);
    result += " ч. ";
    result += std::to_string(minutes);
    result += " мин.";
  }
  else
  {
    // return { (std::string(minutes) + " мин.").c_str() };
    result = std::to_string(minutes);
    result += " мин.";
  }
  return { result.c_str() };
update_interval: ${update_interval}
icon: mdi:clock-start
web_server:
  sorting_weight: 1000
