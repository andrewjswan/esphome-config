substitutions:
  group: "3"
  sound: "83"
  project_name: "ajs.Light - Music Leds ESPNow"
  project_version: "1.5.5"

web_server:
  version: 3
  sorting_groups:
    - id: sorting_group_espnow_settings
      name: "ESPNow Settings"
      sorting_weight: 5

espnow:
  auto_add_peer: true
  channel: 1

music_leds:
  id: music_light
  on_sound_loop:
    - logger.log:
        format: "${friendly_name} Sound loop, %f %d %f %d"
        args:
          - volume_smth
          - volume_raw
          - fft_major_peak
          - sample_peak
    - script.execute:
        id: send_state
        volume_smth: !lambda return volume_smth;
        volume_raw: !lambda return volume_raw;
        fft_major_peak: !lambda return fft_major_peak;
        sample_peak: !lambda return sample_peak;

switch:
  # ESPNow
  - platform: template
    name: "Master"
    id: master
    icon: mdi:shield-crown-outline
    optimistic: true
    entity_category: config
    web_server:
      sorting_group_id: sorting_group_espnow_settings

script:
  # Send Sound state
  - id: send_state
    parameters:
      volume_smth: float
      volume_raw: int16_t
      fft_major_peak: float
      sample_peak: bool
    then:
      - if:
          condition:
            switch.is_on: master
          then:
            - logger.log: "Send broadcast packet"
            - espnow.broadcast:
                data: !lambda |-
                  struct ESPNowData {
                    uint8_t id;
                    uint8_t group;
                  } PACKED;

                  struct ESPNowDataSound : ESPNowData {
                    float volume_smth;
                    int16_t volume_raw;
                    float fft_major_peak;
                    bool sample_peak;
                  } PACKED;

                  ESPNowDataSound data;
                  data.id = ${sound};
                  data.group = ${group};
                  data.volume_smth = volume_smth;
                  data.volume_raw = volume_raw;
                  data.fft_major_peak = fft_major_peak;
                  data.sample_peak = sample_peak;

                  std::vector<uint8_t> buffer(sizeof(ESPNowDataSound));
                  memcpy(buffer.data(), &data, sizeof(ESPNowDataSound));
                  return buffer;
                on_sent:
                  - logger.log: "ESPNow message sent successfully"
                on_error:
                  - logger.log: "ESPNow message failed to send"
                wait_for_sent: true
                continue_on_error: true
            - logger.log: "Done"
    mode: restart
